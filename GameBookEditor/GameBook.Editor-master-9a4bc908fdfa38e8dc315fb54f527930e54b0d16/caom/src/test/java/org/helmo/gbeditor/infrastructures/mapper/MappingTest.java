 /* This Java source file was generated by the Gradle 'init' task.


package org.helmo.gbeditor.infrastructures.mapper;

import org.assertj.core.util.VisibleForTesting;
import org.helmo.gbeditor.domains.CanCreateBook;
import org.helmo.gbeditor.domains.GameBookEditor;
import org.helmo.gbeditor.infrastructures.Mapping;
import org.helmo.gbeditor.infrastructures.dtos.GameBookEditorDto;
import org.helmo.gbeditor.infrastructures.dtos.SessionDto;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;
@VisibleForTesting
*
 * La classe MappingTest permet de tester les méthodes de la classe Mapping


class MappingTest {
    private static final String FIRST_ISBN = "2-170051-01-5";
    private static final String AUTHOR_NAME = "Maxime Cao";
    private static final String FIRST_TITLE = "Harry Potter 1";
    private static final String FIRST_RESUME = "Ceci est la description d'Harry Potter 1";

    private static final String SECOND_ISBN = "2-170051-02-3";
    private static final String SECOND_TITLE = "Harry Potter 2";
    private static final String SECOND_RESUME = "Ceci est la description d'Harry Potter 2";

    private static final String THIRD_ISBN = "2-170051-03-1";
    private static final String THIRD_TITLE = "Harry Potter 3";
    private static final String THIRD_RESUME = "Ceci est la description d'Harry Potter 3";

    private static final String LONG_RESUME = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus pharetra elit eget auctor efficitur. Quisque finibus arcu eu tortor eleifend, cursus eleifend erat ornare. Ut vel gravida mi, id sollicitudin dui. Sed luctus turpis est, et dapibus nunc pharetra vitae. Donec ut urna viverra mi condimentum volutpat id sit amet nibh. Cras cursus, metus in consectetur vehicula, dolor nulla tristique odio, ut dignissim nisl purus sed felis. Duis lectus.";

    @Test
    @VisibleForTesting
    void toDtoWithCorrectListOfBooks() {
        Mapping map = new Mapping();
        List<CanCreateBook> booksList = new ArrayList<>();
        booksList.add(new GameBookEditor(AUTHOR_NAME,FIRST_ISBN,FIRST_TITLE,FIRST_RESUME));
        booksList.add(new GameBookEditor(AUTHOR_NAME,SECOND_ISBN,SECOND_TITLE,LONG_RESUME));
        booksList.add(new GameBookEditor(AUTHOR_NAME,THIRD_ISBN,THIRD_TITLE,THIRD_RESUME));

        try {
            SessionDto sessionDto = map.toDto(booksList);
            assertNotNull(sessionDto);
            List<GameBookEditorDto> booksEditorDtoList = sessionDto.getBooks();
            assertNotNull(booksEditorDtoList);

            assertEquals(booksList.size(), booksEditorDtoList.size());

            for (int i = 0; i < booksList.size(); i++) {
                CanCreateBook currentBook = booksList.get(i);
                GameBookEditorDto currentBookDto = booksEditorDtoList.get(i);

                assertEquals(currentBook.getAuthorName(), currentBookDto.getAuthorName());
                assertEquals(currentBook.getISBNRepresentation(), currentBookDto.getIsbn());
                assertEquals(currentBook.getTitle(), currentBookDto.getTitle());
                assertEquals(currentBook.getResume(), currentBookDto.getResume());
            }
        } catch(Exception e) {
            fail("La méthode toDto ne doit pas déclencher d'exception car la liste de livres n'est pas nulle et contient uniquement des livres correctement formattés");
        }
    }

    @Test
    @VisibleForTesting
    void toDtoWithOneValidBookAndOneInvalid() {
        Mapping map = new Mapping();
        List<CanCreateBook> booksList = new ArrayList<>();
        booksList.add(new GameBookEditor(AUTHOR_NAME,FIRST_ISBN,FIRST_TITLE,FIRST_RESUME));
        booksList.add(null);

        try {
            SessionDto sessionDto = map.toDto(booksList);
            assertNotNull(sessionDto);
            List<GameBookEditorDto> booksEditorDtoList = sessionDto.getBooks();
            assertNotNull(booksEditorDtoList);

            assertEquals(1, booksEditorDtoList.size());
            GameBookEditorDto validDtoBook = booksEditorDtoList.get(0);
            CanCreateBook validBook = booksList.get(0);
            assertEquals(validDtoBook.getAuthorName(), validBook.getAuthorName());
            assertEquals(validBook.getISBNRepresentation(), validDtoBook.getIsbn());
            assertEquals(validBook.getTitle(), validDtoBook.getTitle());
            assertEquals(validBook.getResume(), validDtoBook.getResume());
        } catch(Exception e) {
            fail("La méthode toDto ne doit pas déclencher d'exception car la liste de livres n'est pas nulle et contient un livre correctement formatté");
        }
    }

    @Test
    @VisibleForTesting
    void toDtoWithNoValidBook() {
        Mapping map = new Mapping();
        List<CanCreateBook> booksList = new ArrayList<>();
        booksList.add(null);
        booksList.add(null);

        try {
            SessionDto sessionDto = map.toDto(booksList);
            assertNotNull(sessionDto);
            List<GameBookEditorDto> booksEditorDtoList = sessionDto.getBooks();
            assertNotNull(booksEditorDtoList);

            assertEquals(0, booksEditorDtoList.size());
        } catch(Exception e) {
            fail("La méthode toDto ne doit pas déclencher d'exception car la liste de livres n'est pas nulle");
        }
    }
    @Test
    @VisibleForTesting
    void toDtoWithNullListOfBooks() {
        Mapping map = new Mapping();
        List<CanCreateBook> books = null;

        try {
            map.toDto(books);
            fail("La méthode toDto doit déclencher une exception car la liste de livres est nulle");
        } catch(Exception ex) {
            assertEquals(ex.getMessage(),"Veuillez fournir une liste correcte de livres");
        }
    }

    @Test
    @VisibleForTesting
    void fromDtoWithCorrectListOfBooksDto() {
        Mapping map = new Mapping();
        List<GameBookEditorDto> booksListDto = new ArrayList<>();
        booksListDto.add(new GameBookEditorDto(AUTHOR_NAME,FIRST_ISBN,FIRST_TITLE,FIRST_RESUME));
        booksListDto.add(new GameBookEditorDto(AUTHOR_NAME,SECOND_ISBN,SECOND_TITLE,LONG_RESUME));
        booksListDto.add(new GameBookEditorDto(AUTHOR_NAME,THIRD_ISBN,THIRD_TITLE,THIRD_RESUME));
        SessionDto sessionDto = new SessionDto(booksListDto);

        List<GameBookEditorDto> booksDtoList = sessionDto.getBooks();

        try {
            List<CanCreateBook> booksList = map.fromDto(sessionDto);
            assertNotNull(booksList);
            assertEquals(booksDtoList.size(),booksList.size());

            for(int i = 0; i < booksList.size(); i++) {
                GameBookEditorDto currentBookDto = booksDtoList.get(i);
                CanCreateBook currentBook = booksList.get(i);

                assertEquals(currentBookDto.getAuthorName(),currentBook.getAuthorName());
                assertEquals(currentBookDto.getIsbn(),currentBook.getISBNRepresentation());
                assertEquals(currentBookDto.getTitle(),currentBook.getTitle());
                assertEquals(currentBookDto.getResume(),currentBook.getResume());
            }
        } catch(Exception e) {
            fail("La méthode fromDto ne doit pas déclencher d'exception car la liste de livres n'est pas nulle et contient uniquement des livres correctement formattés");
        }
    }

    @Test
    @VisibleForTesting
    void fromDtoWithOneValidBookAndOneInvalid() {
        Mapping map = new Mapping();
        List<GameBookEditorDto> booksListDto = new ArrayList<>();
        booksListDto.add(new GameBookEditorDto(AUTHOR_NAME,FIRST_ISBN,FIRST_TITLE,FIRST_RESUME));
        booksListDto.add(null);
        SessionDto sessionDto = new SessionDto(booksListDto);

        List<GameBookEditorDto> booksDtoList = sessionDto.getBooks();

        try {
            List<CanCreateBook> booksList = map.fromDto(sessionDto);
            assertNotNull(booksList);
            assertEquals(1,booksList.size());

            GameBookEditorDto validDtoBook = booksDtoList.get(0);
            CanCreateBook validBook = booksList.get(0);

            assertEquals(validDtoBook.getAuthorName(),validBook.getAuthorName());
            assertEquals(validDtoBook.getTitle(),validBook.getTitle());
            assertEquals(validDtoBook.getIsbn(),validBook.getISBNRepresentation());
            assertEquals(validDtoBook.getResume(),validBook.getResume());
        } catch(Exception e) {
            fail("La méthode fromDto ne doit pas déclencher d'exception car la liste de livres n'est pas nulle et contient un livre correctement formatté");
        }
    }

    @Test
    @VisibleForTesting
    void fromDtoWithNullSessionDto() {
        Mapping map = new Mapping();
        SessionDto sessionDto = null;

        try {
            List<CanCreateBook> books = map.fromDto(sessionDto);
            assertNotNull(books);
            assertEquals(0,books.size());
        } catch(Exception ex) {
            fail("La méthode fromDto ne doit pas déclencher une exception car SessionDto est nul, donc cela doit renvoyer une liste de livres vide");
        }
    }

    @Test
    @VisibleForTesting
    void fromDtoWithNullListOfBooksDto() {
        Mapping map = new Mapping();
        SessionDto sessionDto = new SessionDto(null);
        assertEquals(0,sessionDto.getNumberOfBooks());

        try {
            List<CanCreateBook> books = map.fromDto(sessionDto);
            assertNotNull(books);
            assertEquals(0,books.size());
        } catch(Exception ex) {
            fail("La méthode fromDto ne doit pas déclencher une exception car SessionDto contient une liste de livres nulle, donc cela doit renvoyer une liste de livres vide");
        }
    }

    @Test
    @VisibleForTesting
    void fromDtoWithInvalidAuthorName() {
        Mapping map = new Mapping();
        List<GameBookEditorDto> booksListDto = new ArrayList<>();
        booksListDto.add(new GameBookEditorDto("Maxime 123",SECOND_ISBN,SECOND_TITLE,SECOND_RESUME));
        SessionDto sessionDto = new SessionDto(booksListDto);
        assertEquals(1,sessionDto.getNumberOfBooks());

        try {
            List<CanCreateBook> books = map.fromDto(sessionDto);
            assertNotNull(books);
            assertEquals(0,books.size());
        } catch(Exception ex) {
            fail("La méthode fromDto ne doit pas déclencher d'exception lorsqu'un livre dans la liste Dto contient un nom d'auteur invalide. Ce livre n'est tout simplement pas repris dans la liste retournée");
        }
    }

    @Test
    @VisibleForTesting
    void fromDtoWithInvalidIsbn() {
        Mapping map = new Mapping();
        List<GameBookEditorDto> booksListDto = new ArrayList<>();
        booksListDto.add(new GameBookEditorDto(AUTHOR_NAME,"2-1344-2-X",SECOND_TITLE,SECOND_RESUME));
        SessionDto sessionDto = new SessionDto(booksListDto);
        assertEquals(1,sessionDto.getNumberOfBooks());

        try {
            List<CanCreateBook> books = map.fromDto(sessionDto);
            assertNotNull(books);
            assertEquals(0,books.size());
        } catch(Exception ex) {
            fail("La méthode fromDto ne doit pas déclencher d'exception lorsqu'un livre dans la liste Dto contient un isbn invalide. Ce livre n'est tout simplement pas repris dans la liste retournée");
        }
    }
    @Test
    @VisibleForTesting
    void fromDtoWithInvalidTitle() {
        Mapping map = new Mapping();
        List<GameBookEditorDto> booksListDto = new ArrayList<>();
        booksListDto.add(new GameBookEditorDto(AUTHOR_NAME,SECOND_ISBN,"",SECOND_RESUME));
        SessionDto sessionDto = new SessionDto(booksListDto);
        assertEquals(1,sessionDto.getNumberOfBooks());

        try {
            List<CanCreateBook> books = map.fromDto(sessionDto);
            assertNotNull(books);
            assertEquals(0,books.size());
        } catch(Exception ex) {
            fail("La méthode fromDto ne doit pas déclencher d'exception lorsqu'un livre dans la liste Dto contient un titre invalide. Ce livre n'est tout simplement pas repris dans la liste retournée");
        }
    }

    @Test
    @VisibleForTesting
    void fromDtoWithInvalidResume() {
        Mapping map = new Mapping();
        List<GameBookEditorDto> booksListDto = new ArrayList<>();
        booksListDto.add(new GameBookEditorDto(AUTHOR_NAME,SECOND_ISBN,SECOND_TITLE,""));
        SessionDto sessionDto = new SessionDto(booksListDto);
        assertEquals(1,sessionDto.getNumberOfBooks());

        try {
            List<CanCreateBook> books = map.fromDto(sessionDto);
            assertNotNull(books);
            assertEquals(0,books.size());
        } catch(Exception ex) {
            fail("La méthode fromDto ne doit pas déclencher d'exception lorsqu'un livre dans la liste Dto contient un résumé invalide. Ce livre n'est tout simplement pas repris dans la liste retournée");
        }
    }
}
*/